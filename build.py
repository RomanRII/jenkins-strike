import argparse
from jinja2 import Template
from core.helper import dynamic

def main():
	# Create an ArgumentParser object
	parser = argparse.ArgumentParser()
	# Add command-line arguments
	parser.add_argument("--sshbanner", required=True)
	parser.add_argument("--sshpipename", required=True)
	parser.add_argument("--smbheader", required=True)
	parser.add_argument("--samplename", required=True)
	parser.add_argument("--smbpipe", required=True)
	parser.add_argument("--smbpipestager", required=True)
	parser.add_argument("--sleeptime", required=True)
	parser.add_argument("--jitter", required=True)
	parser.add_argument("--datajitter", required=True)
	parser.add_argument("--beaconuagent", required=True)
	parser.add_argument("--certtype", required=True)
	parser.add_argument("--accesstoken", required=True)
	parser.add_argument("--tcpheader", required=True)
	parser.add_argument("--tcpport", required=True)
	parser.add_argument("--httpstageruries", required=True)
	parser.add_argument("--httpstagerurisf", required=True)
	parser.add_argument("--stagerserverhead", required=True)
	parser.add_argument("--pespawntoes", required=True)
	parser.add_argument("--pespawntosf", required=True)
	parser.add_argument("--peobfuscate", required=True)
	parser.add_argument("--pesmartinject", required=True)
	parser.add_argument("--peamsidisable", required=True)
	parser.add_argument("--postexpipe", required=True)
	parser.add_argument("--pekeylogger", required=True)
	parser.add_argument("--allocsettings", required=True)
	parser.add_argument("--memindstomppe", required=True)
	parser.add_argument("--memindobfuscate", required=True)
	parser.add_argument("--memindcleanup", required=True)
	parser.add_argument("--memindsleepmask", required=True)
	parser.add_argument("--memindsmartinj", required=True)
	parser.add_argument("--memindname", required=True)
	parser.add_argument("--procinjbofalloc", required=True)
	parser.add_argument("--bofreusemem", required=True)
	parser.add_argument("--procinjalloc", required=True)
	parser.add_argument("--procinjminalloc", required=True)
	parser.add_argument("--httpcfgsrvheader", required=True)
	parser.add_argument("--httpcfgtrustxfwd", required=True)
	parser.add_argument("--httpgeturi", required=True)
	parser.add_argument("--httpgetsrvhead", required=True)
	parser.add_argument("--httpposturi", required=True)
	parser.add_argument("--httppostsrvhead", required=True)
	parser.add_argument("--dnsbeaconidle", required=True)
	parser.add_argument("--dnsmaxtxt", required=True)
	parser.add_argument("--dnssleep", required=True)
	parser.add_argument("--dnsttl", required=True)
	parser.add_argument("--dnsmaxdns", required=True)
	parser.add_argument("--dnsstageprepend", required=True)
	parser.add_argument("--dnsdtagesubhost", required=True)
	parser.add_argument("--dnsbeacon", required=True)
	parser.add_argument("--dnsgeta", required=True)
	parser.add_argument("--dnsgetaaaa", required=True)
	parser.add_argument("--dnsgettxt", required=True)
	parser.add_argument("--dnsputmetadata", required=True)
	parser.add_argument("--dnsputoutput", required=True)
	parser.add_argument("--dnsnsresponse", required=True)
	# Parse the command-line arguments
	args = parser.parse_args()
	# Assign values to variables
	sshbanner = args.sshbanner
	sshpipename = args.sshpipename
	smbheader = args.smbheader
	samplename = args.samplename
	smbpipe = args.smbpipe
	smbpipestager = args.smbpipestager
	sleeptime = args.sleeptime
	jitter = args.jitter
	datajitter = args.datajitter
	beaconuagent = args.beaconuagent
	certtype = args.certtype
	accesstoken = args.accesstoken
	tcpheader = args.tcpheader
	tcpport = args.tcpport
	httpstageruries = args.httpstageruries
	httpstagerurisf = args.httpstagerurisf
	stagerserverhead = args.stagerserverhead
	pespawntoes = args.pespawntoes
	pespawntosf = args.pespawntosf
	peobfuscate = args.peobfuscate
	pesmartinject = args.pesmartinject
	peamsidisable = args.peamsidisable
	postexpipe = args.postexpipe
	pekeylogger = args.pekeylogger
	allocsettings = args.allocsettings
	memindstomppe = args.memindstomppe
	memindobfuscate = args.memindobfuscate
	memindcleanup = args.memindcleanup
	memindsleepmask = args.memindsleepmask
	memindsmartinj = args.memindsmartinj
	memindname = args.memindname
	procinjbofalloc = args.procinjbofalloc
	bofreusemem = args.bofreusemem
	procinjalloc = args.procinjalloc
	procinjminalloc = args.procinjminalloc
	httpcfgsrvheader = args.httpcfgsrvheader
	httpcfgtrustxfwd = args.httpcfgtrustxfwd
	httpgeturi = args.httpgeturi
	httpgetsrvhead = args.httpgetsrvhead
	httpposturi = args.httpposturi
	httppostsrvhead = args.httppostsrvhead
	dnsbeaconidle = args.dnsbeaconidle
	dnsmaxtxt = args.dnsmaxtxt
	dnssleep = args.dnssleep
	dnsttl = args.dnsttl
	dnsmaxdns = args.dnsmaxdns
	dnsstageprepend = args.dnsstageprepend
	dnsdtagesubhost = args.dnsdtagesubhost
	dnsbeacon = args.dnsbeacon
	dnsgeta = args.dnsgeta
	dnsgetaaaa = args.dnsgetaaaa
	dnsgettxt = args.dnsgettxt
	dnsputmetadata = args.dnsputmetadata
	dnsputoutput = args.dnsputoutput
	dnsnsresponse = args.dnsnsresponse

	defaulttemplate = "template/template.profile"
	c2profiletemplatefilecontents = open(defaulttemplate,'r').read()
	c2profiletemplate = Template(c2profiletemplatefilecontents)

	finaltemplate = c2profiletemplate.render(
				samplename=samplename,
				sleeptime=sleeptime,
				jitter=jitter,
				datajitter=datajitter,
				beaconuseragent=beaconuagent,
				httpscertificatetype=dynamic.httpsCert(certtype),
				accesstokencontrol=accesstoken,
				tcpport=tcpport,
				randomtcpframeheader=dynamic.randomFrameHeader("tcp_frame_header", tcpheader),
				smbbeaconoipename=smbpipe,
				smbbeaconpipenamestager=smbpipestager,
				randomsmbframeheader=dynamic.randomFrameHeader("smb_frame_header", smbheader),
				dnsbeacondnsidle=dnsbeaconidle,
				dnsbeacondnsmaxtxt=dnsmaxtxt,
				dnsbeacondnssleep=dnssleep,
				dnsbeacondnsttl=dnsttl,
				dnsbeaconmaxdns=dnsmaxdns,
				dnsbeacondnsstagerprepend=dnsstageprepend,
				dnsbeacondnsstagersubhost=dnsdtagesubhost,
				dnsbeaconbeacon=dnsbeacon,
				dnsbeacongeta=dnsgeta,
				dnsbeacongetaaaa=dnsgetaaaa,
				dnsbeacongettxt=dnsgettxt,
				dnsbeaconputmetadata=dnsputmetadata,
				dnsbeaconputoutput=dnsputoutput,
				dnsbeaconnsresponse=dnsnsresponse,
				sshbanner=sshbanner,
				sshpipename=sshpipename,
				httpsstagerurix86=httpstageruries,
				httpstagerurix64=httpstagerurisf,
				httpsstagerserverheader1=stagerserverhead,
				postexspawntox86=pespawntoes,
				postexspawntox64=pespawntosf,
				postexobfuscate=peobfuscate,
				postexsmartinject=pesmartinject,
				postexamsidisable=peamsidisable,
				postexpipename=postexpipe,
				postexkeylogger=pekeylogger,
				allocatorsettings=dynamic.allocatorSettings(allocsettings),
				memoryindicatorstomppe=memindstomppe,
				memoryindicatorobfuscate=memindobfuscate,
				memoryindicatorstagecleanup=memindcleanup,
				memoryindicatorsleepmask=memindsleepmask,
				memoryindicatorsmartinject=memindsmartinj,
				memoryindicatorname=memindname,
				procinjectionbofallocator=procinjbofalloc,
				procinjectionreusemem=bofreusemem,
				procinjectionallocator=procinjalloc,
				procinjectionminalloc=procinjminalloc,
				httpconfigserverheader=httpcfgsrvheader,
				httpconfigtrustxforward=httpcfgtrustxfwd,
				httpgeturi=httpgeturi,
				httpgetserverheader=httpgetsrvhead,
				httpposturi=httpposturi,
				httppostserverheader=httpgetsrvhead,
				http_stager_server_prepend=dynamic.getHttpContent(),
				http_stager_server_append=dynamic.getHttpContent(),
				stage_magic_mz_x86=dynamic.getStageMagicMz86(),
				stage_magic_mz_x64=dynamic.getStageMagicMz64(),
				stage_magic_pe=dynamic.getStageMagicPe(),
				stage_compile_time=dynamic.getStageCompileTime(),
				stage_entry_point=dynamic.getStageEntryPoint(),
				stage_image_size_x86=dynamic.getStageImageSizex86(),
				stage_image_size_x64=dynamic.getStageImageSizex64(),
				stage_rich_header=dynamic.getStageRichHeader(),
				stage_transform_x86_strrep1=dynamic.getRandomObject(),
				stage_transform_x64_strrep1=dynamic.getRandomObject(),
				process_inject_transform_x86_append=dynamic.getNops(),
				process_inject_transform_x64_append=dynamic.getNops(),
				http_get_client_metadata_prepend=dynamic.getHttpClientMetadataCookie(),
				http_get_server_transform=dynamic.getHttpMetadataTransform(),
				http_get_server_append=dynamic.getHttpContent(),
				http_post_client_id_transform=dynamic.getHttpMetadataTransform(),
				http_post_client_id_parameter=dynamic.getHttpPostClientidParameter(),
				http_post_client_output_transform=dynamic.getHttpMetadataTransform(),
				http_post_server_transform=dynamic.getHttpMetadataTransform(),
				http_post_server_prepend=dynamic.getHttpContent(),
				http_post_server_append=dynamic.getHttpContent(),
				http_get_client_metadata_transform=dynamic.getHttpMetadataTransform()
				)
	f = open(samplename + '.profile', "w")
	f.write(finaltemplate)
	f.close()

if __name__ == "__main__":
	main()
